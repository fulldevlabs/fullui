---
import { Code } from 'astro:components'
import { Button, Checkbox, Icon, Input, Select } from 'fulldev-ui'
import { pascal } from 'radash'

interface Props {
  title: string
  props: {
    name: string
    type?: 'string' | 'boolean' | string
    value?: any
    default: any
  }[]
}

const components = await Astro.glob('../../node_modules/fulldev-ui/**/*.astro')

const { title: component, props } = Astro.props

const Component = components.find((astroComponent) => {
  const fileName = astroComponent.default.moduleId?.split('/').pop()
  const componentName = fileName?.split('.')[0]
  return componentName === pascal(component)
})?.default

// Astro.url.searchParams.forEach((value, key) => {
//   const propIndex = props.findIndex((prop) => prop.name === key)
//   if (propIndex === -1) return
//   props[propIndex].value = value
// })

const propsObject: any = {}
props.forEach(({ name, value, default: defaultValue }) => {
  propsObject[name] = value || defaultValue
})

const isString = (name: string) => ['html', 'text'].includes(name)
const isArray = (name: string) =>
  ['color', 'size', 'theme', 'variant', 'structure', 'frame'].includes(name)
const isBoolean = (name: string) => ['compact', 'contrast'].includes(name)
const isSnippetOnly = (name: string) =>
  ['list', 'options', 'label', 'name', 'items', 'placeholder'].includes(name)

const propsString = props
  .map(({ name, value, default: defaultValue }) => {
    if (isBoolean(name))
      return `${name}={${value || defaultValue ? 'true' : 'false'}}`
    else if ((isArray(name) || isString(name)) && (value || defaultValue))
      return `${name}="${value || defaultValue}"`
    else if (name === 'size') return `${name}="md"`
    else if (name === 'color') return `${name}="base"`
    else if (isSnippetOnly(name) && (value || defaultValue))
      return `${name}={${JSON.stringify(value || defaultValue)}}`
  })
  .filter(Boolean)
  .join('\n  ')

const codeSnippet = `--- 
import { ${component} } from 'fulldev-ui'
---

<${component}
  ${propsString}
/>`
---

<div class="story not-content">
  <div class="story-preview">
    {
      Component && (
        <Component
          class:list={['story-component']}
          {...propsObject}
        >
          <slot />
        </Component>
      )
    }
  </div>

  <div class="story-inputs compact">
    {
      props.map(({ name, type, value, default: defaultValue }) => {
        if (isBoolean(name))
          return (
            <Checkbox
              class:list={['story-input']}
              label={name}
              checked={value || defaultValue}
              {name}
            />
          )
        else if (isString(name) && (value || defaultValue))
          return (
            <Input
              class:list={['story-input']}
              label={name}
              {name}
              {value}
            />
          )
        else if (isArray(name) && (value || defaultValue)) {
          const options = type?.split('|').map((o) => o.trim())
          return (
            <Select
              class:list={['story-input']}
              label={name}
              value={value || defaultValue}
              {options}
              {name}
            />
          )
        } else if (name === 'size') {
          const options = type?.split('|').map((o) => o.trim())
          return (
            <Select
              class:list={['story-input']}
              label={name}
              value={'md'}
              {options}
              {name}
            />
          )
        } else if (name === 'color') {
          const options = type?.split('|').map((o) => o.trim())
          return (
            <Select
              class:list={['story-input']}
              label={name}
              value={'base'}
              {options}
              {name}
            />
          )
        }
      })
    }
  </div>

  <div class="story-snippet">
    <Code
      wrap
      lang={'astro'}
      code={codeSnippet}
      theme={'css-variables'}
    />
    <Button
      id="copySnippet"
      color="base"
      variant="outline"
      size="sm"
    >
      <Icon name="copy" />
    </Button>
  </div>
</div>

<script define:vars={{ codeSnippet }} is:inline>
  const inputs = document.querySelectorAll(
    '.story-input input, .story-input select'
  )

  const component = document.querySelector('.story-component')

  inputs.forEach((input) => {
    input.addEventListener('input', (event) => {
      const { name, value } = event.target
      if (name === 'text') component.textContent = value
      else if (name === 'html') component.innerHTML = value
      else if (name === 'compact') component.classList.toggle('compact')
      else if (name === 'contrast') component.classList.toggle('contrast')
      else {
        const currentClass = component.className
          .split(' ')
          .find((c) => c.startsWith(name))
        component.classList.remove(currentClass)
        component.classList.add(name + '-' + value)

        console.log({ name, value })
      }

      const allSpans = document.querySelectorAll('.astro-code span')

      allSpans.forEach((span, index) => {
        if (span.textContent.trim() === name) {
          if (value === 'on')
            allSpans[index + 3].textContent = input.checked ? 'true' : 'false'
          else allSpans[index + 2].textContent = '"' + value + '"'
        }
      })
    })
  })

  document
    .getElementById('copySnippet')
    .addEventListener('click', () => navigator.clipboard.writeText(codeSnippet))
</script>

<style>
  * {
    box-sizing: border-box;
  }

  .story {
    display: flex;
    flex-direction: column;
    border: 1px solid var(--border);
    width: 100%;

    .story-preview {
      border-bottom: 0;
      padding: 2.5rem;
      width: 100%;
    }

    .story-inputs {
      display: flex;
      flex-direction: column;
      gap: var(--space-3);
      border-bottom: 0;
      border: solid var(--border);
      border-width: 1px 0px;
      padding: var(--space-4);
      width: 100%;
    }

    .story-snippet {
      display: flex;
      justify-content: space-between;
      background-color: var(--background-subtle) !important;
      padding: var(--space-3);
      font-size: var(--text-label);

      .astro-code {
        margin: 0;
        background-color: var(--background-subtle) !important;
        font-size: var(--text-label);
      }

      a {
        opacity: 0;
        transition: all 0.25s ease-out;
      }
    }

    .story-snippet:hover {
      a {
        opacity: 100;
      }
    }
  }
</style>
