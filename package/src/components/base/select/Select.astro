---
import type { ComponentProps, Polymorphic } from 'astro/types'
import Component from '../../_Component.astro'
import Box from '../../segment/Box.astro'
import Label from '../../typography/Label.astro'
import Icon from '../Icon.astro'
import { default as SelectElement } from './SelectElement.astro'
import SelectOption from './SelectOption.astro'

type Props<As extends 'div'> = Polymorphic<{ as: As }> & {
  label?: ComponentProps<typeof Label> | ComponentProps<typeof Label>['text']
  placeholder?: ComponentProps<typeof SelectOption>['text']
  options?: (
    | ComponentProps<typeof SelectOption>
    | ComponentProps<typeof SelectOption>['text']
  )[]
  value?: ComponentProps<typeof SelectOption>['value']
  icon?: ComponentProps<typeof Icon> | ComponentProps<typeof Icon>['name']
} & Pick<ComponentProps<typeof SelectElement>, 'name' | 'required' | 'disabled'>

const {
  as = 'div',
  label,
  placeholder,
  options,
  icon = 'chevron-down',
  name,
  value,
  required,
  disabled,
  ...rest
} = Astro.props
---

<Component
  class:list={['select']}
  {as}
  {...rest}
>
  <Label
    contrast
    for={name}
    {...typeof label === 'string' ? { text: label } : label}
  />
  <Box>
    <SelectElement
      id={name}
      {name}
      {required}
      {disabled}
    >
      <SelectOption
        text={placeholder}
        selected
        disabled
      />
      {
        options?.map((option: any) => (
          <SelectOption
            selected={option.value === value}
            {...(typeof option === 'string' ? { text: option } : option)}
          />
        ))
      }
      <slot />
    </SelectElement>
    <Icon {...typeof icon === 'string' ? { name: icon } : icon} />
  </Box>
</Component>

<style is:global lang="scss">
  @import '../../../css/utils.scss';

  @include component('select') {
    display: flex;
    position: relative;
    flex-direction: column;
    gap: var(--space-1);
    width: 100%;

    .icon {
      position: absolute;
      top: 50%;
      right: var(--element-2);
      transform: translateY(-50%);
    }
  }
</style>
